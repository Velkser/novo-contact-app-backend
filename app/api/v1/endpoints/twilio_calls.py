from fastapi import APIRouter, Depends, HTTPException, status, Request, Response
from sqlalchemy.orm import Session
from typing import Optional
import logging
from app.database import get_db
from app.api import deps
from app.models.user import User
from app.models.contact import Contact
from app.services.twilio_service import twilio_service
from app.crud.contact import get_contact, add_dialog
from app.schemas.twilio_call import TwilioCallCreate, TwilioCallResponse, TwilioCallStatus

router = APIRouter(prefix="/twilio-calls", tags=["twilio_calls"])
logger = logging.getLogger(__name__)

@router.post("/initiate", response_model=TwilioCallResponse)
def initiate_call(
    call_data: TwilioCallCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(deps.get_current_active_user)
):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio (—Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫)
    """
    logger.info(f"üìû Initiating REAL call for user {current_user.id}, contact {call_data.contact_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    contact = get_contact(db, contact_id=call_data.contact_id, user_id=current_user.id)
    if not contact:
        logger.warning(f"‚ùå Contact {call_data.contact_id} not found for user {current_user.id}")
        raise HTTPException(status_code=404, detail="Contact not found")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    script = call_data.script or contact.script
    if not script:
        logger.warning(f"‚ùå No script provided for contact {contact.id}")
        raise HTTPException(status_code=400, detail="No script provided")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Twilio –∫–ª–∏–µ–Ω—Ç–∞
    if not twilio_service.client:
        logger.error("‚ùå Twilio service not initialized")
        raise HTTPException(status_code=500, detail="Twilio service not configured")
    
    # –°–æ–≤–µ—Ä—à–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio
    call_sid = twilio_service.make_call(
        to_number=contact.phone,
        script=script,
        contact_id=contact.id
    )
    
    if not call_sid:
        logger.error(f"‚ùå Failed to initiate REAL call to {contact.phone}")
        raise HTTPException(status_code=500, detail="Failed to initiate call")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        messages = [
            {
                "role": "agent",
                "text": script
            }
        ]
        
        dialog = add_dialog(
            db=db,
            contact_id=contact.id,
            user_id=current_user.id,
            messages=messages,
            transcript=script
        )
        
        if dialog:
            logger.info(f"‚úÖ Dialog saved to database. ID: {dialog.id}")
        else:
            logger.error("‚ùå Failed to save dialog to database")
            
    except Exception as e:
        logger.error(f"‚ùå Error saving dialog: {e}")
    
    logger.info(f"‚úÖ REAL call initiated successfully. SID: {call_sid}")
    
    return TwilioCallResponse(
        call_sid=call_sid,
        status="initiated",
        message="Real call initiated successfully"
    )

@router.get("/{call_sid}/status", response_model=TwilioCallStatus)
def get_call_status(
    call_sid: str,
    current_user: User = Depends(deps.get_current_active_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∏–∑ Twilio
    """
    logger.info(f"üìû Getting REAL call status for {call_sid}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –∏–∑ Twilio
    call_status = twilio_service.get_call_status(call_sid)
    
    if not call_status:
        logger.error(f"‚ùå Failed to get call status for {call_sid}")
        raise HTTPException(status_code=500, detail="Failed to get call status")
    
    logger.info(f"‚úÖ Call status retrieved: {call_status['status']}")
    
    return TwilioCallStatus(
        call_sid=call_status['call_sid'],
        status=call_status['status'],
        duration=call_status['duration'],
        recording_url=None  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    )

@router.post("/webhook")
async def twilio_webhook(request: Request):
    """
    Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç Twilio
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        form_data = await request.form()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        logger.info(f"üì± Twilio webhook received: {dict(form_data)}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        return Response(status_code=200)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing Twilio webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@router.post("/status")
async def call_status_webhook(request: Request, db: Session = Depends(get_db)):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
    """
    try:
        form_data = await request.form()
        call_sid = form_data.get('CallSid')
        call_status = form_data.get('CallStatus')
        
        logger.info(f"üìû Call {call_sid} status: {call_status}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        return Response(status_code=200)
        
    except Exception as e:
        logger.error(f"‚ùå Error processing call status: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")