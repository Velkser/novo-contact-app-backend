from twilio.rest import Client
from twilio.twiml.voice_response import VoiceResponse
from app.core.config import settings
from typing import Optional
import logging

logger = logging.getLogger(__name__)

class TwilioService:
    def __init__(self):
        self.client = None
        self.from_number = settings.TWILIO_PHONE_NUMBER
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if settings.TWILIO_ACCOUNT_SID and settings.TWILIO_AUTH_TOKEN:
            try:
                self.client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)
                logger.info("‚úÖ Twilio service initialized")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Twilio: {e}")
        else:
            logger.warning("‚ö†Ô∏è Twilio credentials not configured. Calls will be simulated.")
    
    def make_call(self, to_number: str, script: str, contact_id: int) -> Optional[str]:
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ Twilio (—Ä–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –Ω–µ —Å–∏–º—É–ª—è—Ü–∏—è)
        
        Args:
            to_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            script: –¢–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            
        Returns:
            SID –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        logger.info(f"üìû Making REAL call to {to_number} for contact {contact_id}")
        
        if not self.client:
            logger.warning("‚ö†Ô∏è Twilio not configured. Cannot make real call.")
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º TwiML –¥–ª—è –∑–≤–æ–Ω–∫–∞
            twiml = self._generate_twiml(script)
            
            call = self.client.calls.create(
                to=to_number,
                from_=self.from_number,
                twiml=twiml
            )
            
            logger.info(f"‚úÖ Real call initiated successfully. SID: {call.sid}")
            return call.sid
            
        except Exception as e:
            logger.error(f"‚ùå Error making REAL call to {to_number}: {e}")
            return None
    
    def _generate_twiml(self, script: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TwiML –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
        resp = VoiceResponse()
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        processed_script = self._preprocess_text(script)
        
        if not processed_script:
            processed_script = "Dobr√Ω de≈à, prep√°ƒçte, ale spr√°va je pr√°zdna."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ—á–∏
        resp.append(resp.pause(length=1))
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º
        resp.say(
            processed_script,
            voice='alice',           # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (–ª—É—á—à–µ –¥–ª—è —Å–ª–æ–≤–∞—Ü–∫–æ–≥–æ)
            language='sk-SK'         # –°–ª–æ–≤–∞—Ü–∫–∏–π —è–∑—ã–∫
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        resp.append(resp.pause(length=1))
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
        resp.hangup()
        
        return str(resp)
    
    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        import re
        text = re.sub(r'\s+', ' ', text).strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        replacements = {
            '‚Ç¨': 'euro',
            '&': 'a',
            '@': 'zavin√°ƒç',
            '%': 'percento',
            '¬∞C': 'stup≈àov Celzia',
            '¬∞F': 'stup≈àov Fahrenheita'
        }
        
        for symbol, replacement in replacements.items():
            text = text.replace(symbol, f' {replacement} ')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text

    def get_call_status(self, call_sid: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –∏–∑ Twilio
        
        Args:
            call_sid: SID –∑–≤–æ–Ω–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.client:
            logger.warning("‚ö†Ô∏è Twilio not configured. Cannot get call status.")
            return None
        
        try:
            call = self.client.calls(call_sid).fetch()
            
            return {
                'call_sid': call.sid,
                'status': call.status,
                'duration': call.duration,
                'direction': call.direction,
                'from_': call.from_,
                'to': call.to,
                'start_time': call.start_time.isoformat() if call.start_time else None,
                'end_time': call.end_time.isoformat() if call.end_time else None,
                'price': call.price,
                'price_unit': call.price_unit
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting call status for {call_sid}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
twilio_service = TwilioService()